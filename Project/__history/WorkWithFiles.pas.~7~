unit WorkWithFiles;

interface

uses AllTypesInProject;
{ Work with ArtistFile }
Procedure ReadArtistListFromFile(ArtistList: TAdrOfList;
  var ArtistFile: TArtistFile);

{ Work with AlbumFile }
Procedure ReadAlbumListFromFile(AlbumList: TAdrOfList;
  var AlbumFile: TAlbumFile);

{ Work with SongFile }
Procedure ReadSongListFromFile(SongList: TAdrOfList; var SongFile: TSongFile);

implementation

{ Work with ArtistFile }
Procedure ReadArtistListFromFile(ArtistList: TAdrOfList;
  var ArtistFile: TArtistFile);
var
  MaxID: ^Integer;
begin
  Assign(ArtistFile, 'ArtistFile');
  Reset(ArtistFile);
  MaxID := @ArtistList^.Max_Id;

  repeat
    New(ArtistList^.next);
    ArtistList := ArtistList^.next;
    Inc(MaxID^);
    Read(ArtistFile, ArtistList^.Artist);
  until Eof(ArtistFile);

  Close(ArtistFile);
end;

Procedure ReWriteArtistListInFile(ArtistList: TAdrOfList;
  var ArtistFile: TArtistFile);
begin
  Assign(ArtistFile, 'ArtistFile');
  ReWrite(ArtistFile);

  while ArtistList^.next <> nil do
  begin
    ArtistList := ArtistList^.next;
    Write(ArtistFile, ArtistList^.Artist);
  end;

  Close(ArtistFile);
end;

{ Work with AlbumFile }
Procedure ReadAlbumListFromFile(AlbumList: TAdrOfList;
  var AlbumFile: TAlbumFile);
var
  MaxID: ^Integer;
begin
  Assign(AlbumFile, 'AlbumFile');
  Reset(AlbumFile);
  MaxID := @AlbumList^.Max_Id;

  repeat
    New(AlbumList^.next);
    AlbumList := AlbumList^.next;
    Inc(MaxID^);
    Read(AlbumFile, AlbumList^.Album);
  until Eof(AlbumFile);

  Close(AlbumFile);
end;

Procedure ReWriteAlbumListInFile(AlbumList: TAdrOfList;
  var AlbumFile: TAlbumFile);
begin
  Assign(AlbumFile, 'AlbumFile');
  ReWrite(AlbumFile);

  while AlbumList^.next <> nil do
  begin
    AlbumList := AlbumList^.next;
    Write(AlbumFile, AlbumList^.Album);
  end;

  Close(AlbumFile);
end;

{ Work with SongFile }
Procedure ReadSongListFromFile(SongList: TAdrOfList; var SongFile: TSongFile);
var
  MaxID: ^Integer;
begin
  Assign(SongFile, 'SongFile');
  Reset(SongFile);
  MaxID := @SongList^.Max_Id;

  repeat
    New(SongList^.next);
    SongList := SongList^.next;
    Inc(MaxID^);
    Read(SongFile, SongList^.Song);
  until Eof(SongFile);

  Close(SongFile);
end;

Procedure ReWriteSongListInFile(SongList: TAdrOfList;
  var AlbumFile: TAlbumFile);
begin
  Assign(AlbumFile, 'AlbumFile');
  ReWrite(AlbumFile);

  while SongList^.next <> nil do
  begin
    SongList := SongList^.next;
    Write(AlbumFile, SongList^.Album);
  end;

  Close(AlbumFile);
end;

end.
